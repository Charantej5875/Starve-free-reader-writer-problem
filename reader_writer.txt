int rc=0;  //counts the number of readers reading shared data
binary semaphore mutex=1; //provides access to change rc
counting semaphore order=1; //To maintain queue of process which are willing to access shared data in FIFO order

binary semaphore data=1;  //To maintain access to shared data

//Reader Process
void reader(){
    //entry section
    wait(order); //wait process in queue for its chance to get executed
    wait(mutex); //wait process to change rc
    rc++;
    if(rc==1) wait(data);  //wait process for access to shared data
    signal(order); //allowing next process in queue to get executed    
    signal(mutex); //release process to change rc

    //critical section
    
    //exit section
    wait(mutex); //wait process to change rc
    rc--;
    if(rc==0) signal(data); //release the access to shared data
    signal(mutex); //release process to change rc
}

//Writer Process
void writer(){
    //entry section
    wait(order);  //wait process in queue for its chance to get executed
    wait(data); //wait for access to shared data
    signal(order);  //allowing next process in queue to get executed

    //critical section
    
    //exit section
    signal(data); //release the access to shared data
}
